#!/bin/bash
#=============================================================================
## Helper script to control timemachine docker container
##
## Usage: {SCRIPT_NAME} <start|stop|create|remove|logs|info|shell>
##
#  Author  : Evgen Rusakov
#  Url     : https://github.com/revgen/docker-timemachine
#
## Environment variables:
##   SMB_NAME       - name of the server (default: Home Time Machine)
##   SMB_USER       - username to log into the server with (default: tm)
##   SMB_PASSWORD   - password to log into the server with (default: machine)
##   TM_DIRECTORY   - timemachine directory (default: /mnt/backup/timemachine)
##
#=============================================================================
# Show help screen based on the commented text at the top of the currect script
show_help() {
    sed -n '/^##/,/^$/s/^## \{0,1\}//p' "$0" | sed 's/{SCRIPT_NAME}/'"$(basename "${0}")"'/g' \
    | sed 's/{VERSION}/'"${VERSION}"'/g'
    exit 255
}

#-----------------------------------------------------------------------------
# PARAMETERS
IMAGE=${IMAGE:-"rev9en/timemachine"}
VERSION=${VERSION:-"1.0.0"}
NAME=${NAME:-"$(basename "${IMAGE}")"}

export SMB_NAME="${SMB_NAME:-"Home Time Machine"}"
export SMB_USER="${SMB_USER:-"tm"}"
export SMB_PASSWORD="${SMB_PASSWORD:-"machine"}"
export SMB_MAX_SIZE_MB="${SMB_MAX_SIZE_MB:-"0"}"
export SMB_PORTS="${SMB_PORTS:-"445"}"
export TM_DIRECTORY="${TM_DIRECTORY:-"/mnt/backup/timemachine"}"

# Using your current user default group ID inside the docker container
PGID=${TM_GID:-"$(id -G | cut -d" " -f1)"}
# Using your current user ID inside the docker container
PUID=${TM_UID:-${UID}}

#-----------------------------------------------------------------------------
create_container() {
    echo "Create a timemachine container"
    echo "Parameters:"
    env | grep "^TM_\|^SM_" | sort | sed 's/^/* /g'
    read -rp "Do you want to continue (Y/n)? " opt
    if [ "${opt:-"y"}" != "y" ] && [ "${opt}" != "Y" ]; then echo "Skip"; exit 1; fi

    # get current timezone: linux and os x version or UTC
    TZ=$(ls -l /etc/localtime 2>/dev/null | awk -F"zoneinfo/" '{print $2}' 2>/dev/null || echo "UTC")
    # The "--net=host" argument is very important, because it makes minidlna visible to all network
    docker create --name="${NAME}" --restart=always \
        --net=host \
        -v "${TM_DIRECTORY}":/share \
        -e PGID=${PGID} -e PUID=${PUID} \
        -e TZ="${TZ}" \
        -e SMB_NAME="${SMB_NAME}" \
        -e SMB_USER="${SMB_USER}" \
        -e SMB_PASSWORD="${SMB_PASSWORD}" \
        -e SMB_MAX_SIZE_MB="${SMB_MAX_SIZE_MB}" \
        -e SMB_PORTS="${SMB_PORTS}" \
        "${IMAGE}:${VERSION}"
    echo "Container '${NAME}' created successfully (from image: ${IMAGE}:${VERSION})."
}

#-----------------------------------------------------------------------------
start_container() {
    echo "Starting '${NAME}' container..."
    docker start "${NAME}" && echo "Started '${NAME} - successfully"
}

#-----------------------------------------------------------------------------
stop_container() {
    echo "Stopping '${NAME}' container ..."
    docker stop "${NAME}" && echo "Stopped '${NAME}' - successfully"
}

#-----------------------------------------------------------------------------
remove_container() {
    stop_container
    echo "Removing '${NAME}' container..."
    docker rm "${NAME}" 2>/dev/null
    echo "Done"
}

#-----------------------------------------------------------------------------
# Show main information about a contaier
status_container() {
    img=$(docker images "${IMAGE}" --format "{{.Repository}}:{{.Tag}}")
    if [ -n "${img}" ]; then echo "    Image: ${img}";
    else echo "    Image: Error - Image '${NAME}' not found"; fi
    id=$(docker ps --filter name=${NAME} --format "{{.ID}}")
    echo "Container: ${NAME}"
    if [ -n "${id}" ]; then
        ports=$(docker ps --filter name="${NAME}" --format "{{.Ports}}")
        status=$(docker ps --filter name="${NAME}" --format "{{.Status}}")
        mounts=$(docker inspect --format="{{range .Mounts }}{{.Source}} -> {{.Destination}},{{end}}" "${NAME}" | tr -s ',' '; ')
        started=$(docker inspect --format='{{.State.StartedAt}}' "${NAME}")
        echo "*  Status: ${status}"
        echo "* Started: ${started}"
        echo "*      ID: ${id}"
        echo "*   Ports: ${ports}"
        echo "*  Mounts: ${mounts}"
        return 0
    else
        echo "*  Status: stopped or not exists"   
        return 1
    fi    
}

#-----------------------------------------------------------------------------
# Parse command line and handle a command
case "${1:-"help"}" in
    create|C)           shift; create_container $@ ;;
    delete|remove)      shift; remove_container $@ ;;
    start|s)            shift; start_container $@ ;;
    stop|S)             shift; stop_container $@ ;;
    shell|sh)           shift; docker exec -it "${NAME}" ${1:-"/bin/sh"} ;;
    log|logs|l)         shift; docker logs "${NAME}" $@ ;;
    status|st)          shift; status_container $@ ;;
    info|I)             shift; status_container $@ ;;
    version|--version)  echo "${NAME} -> ${IMAGE}:${VERSION}" ;;
    help|--help|h|-h)   show_help ;;
    *) echo "Error: Unknow command '${1}'."; show_help ;;
esac
