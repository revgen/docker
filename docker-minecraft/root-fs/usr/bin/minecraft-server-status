#!/usr/bin/env python3
"""Script to provide simple status information about a Minecraft server.
The script is using https://github.com/Dinnerbone/mcstatus library.

See a help for details about usage:
  minecraft-server-status --help
"""
import argparse
import datetime
import json
import os
import socket
import sys
import traceback
import urllib.parse
import urllib.request
from http.server import BaseHTTPRequestHandler, HTTPServer
from mcstatus import MinecraftServer

DEF_MINECRAFT_PORT = 25565
DEF_HTTP_PORT = 80


if os.environ.get('DEBUG') == 'true':
    debug = lambda m: sys.stderr.write(f'{m}\n')
else:
    debug = lambda m: True


class MinecraftServerStatus:
    def __init__(self, address, check_external_access=False):
        self.name = 'minecraft server status'
        self.status = None
        self.address = address or ''
        self.ip = None
        self.version = None
        self.description = None
        self.external_ip = None
        self.external_port_open = None
        self.players_count = 0
        self.players_max = 0
        self.players = []
        self.latency = 0
        self.ping = 0
        self.time = None
        self.message = None
        self._check_external_access = check_external_access

    def to_dict(self):
        items = self.__dict__
        return dict([(k, items[k]) for k in items if not k.startswith('_') and items[k] is not None])

    def __str__(self):
        return json.dumps(self.to_dict())

    def to_json(self):
        return json.dumps(self.to_dict(), indent=2)

    @property
    def _port(self):
        return ((self.address or '') + ',').split(',')[1] or DEF_MINECRAFT_PORT

    def get_status(self):
        debug(f'Getting minecraft server status ({self.address})...')
        self.time = datetime.datetime.utcnow().strftime('%Y-%m-%dT%H:%M:%S%Z')
        try:
            server = MinecraftServer.lookup(self.address)
            # 'status' is supported by all Minecraft servers that are version 1.7 or higher.
            resp = server.status(tries=1)
            self.version = resp.version.name
            descr = resp.description.get('text') if not isinstance(resp.description, str) else None
            self.description = descr or None
            self.players_count = resp.players.online
            self.players_max = resp.players.max
            self.latency = resp.latency
            self.players = None
            try:
                if resp.players and resp.players.sample is not None and len(resp.players.sample) > 0:
                    self.players = [{'name': player.name, 'id': player.id} for player in resp.players.sample]
            except Exception as ex:
                debug('Get user list error: {ex}')
            self.ping = None
            try:
                self.ping = server.ping()
            except Exception as ex:
                debug('Server ping error: {ex}')
            if self._check_external_access:
                self.external_ip = self._get_external_ip()
                self.external_port_open = self._check_if_port_open()
            else:
                self.external_ip = None
                self.external_port_open = None
            self.ip = self._get_hostname_address(self.address.split(':')[0])
            self.status = 'OK'
            self.message = None
        except Exception as ex:
            err_msg = traceback.format_exc()
            # traceback.print_exc(file=sys.stderr)
            self.status = 'ERROR'
            self.message = f'{ex}: {err_msg}'
            debug(f'Exception: {ex}')
        debug(f'The minecraft server status: {self}')
        return self

    def _get_hostname_address(self, hostname):
        try:
            if hostname in ('localhost', '127.0.0.1'):
                return '127.0.0.1'
            ip = socket.gethostbyname(hostname)
            return ip
        except socket.gaierror as ex:
            return f'Error: Invalid hostname, error raised is {ex}'

    def _get_external_ip(self):
        try:
            url = 'http://checkip.amazonaws.com'
            debug(f'Get external ip address: GET {url}')
            resp = urllib.request.urlopen(url).read().decode('utf-8').strip()
            debug(f'Raw response: {resp}')
            return resp
        except Exception as ex:
            traceback.print_exc(file=sys.stderr)
            debug(f'Exception: {ex}')
            return str(ex)


    def _check_if_port_open(self):
        try:
            url = 'https://www.whatsmyip.org/data/port-scanner.php'
            data = urllib.parse.urlencode({'port': self._port, 'timeout': 'default'}).encode()
            debug(f'Check open port. POST {url}, body={data}')
            headers = {
                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',
                'Referer': 'https://www.whatsmyip.org/port-scanner/'
            }
            req =  urllib.request.Request(url, data=data, headers=headers, method='POST')
            resp = urllib.request.urlopen(req).read().decode('utf-8').strip()
            debug(f'Raw response: {resp}')
            return str(resp) == '1'
        except Exception as ex:
            traceback.print_exc(file=sys.stderr)
            debug(f'Exception: {ex}')
            return str(ex)


def MinecraftServerStatusFactory(mc_status):
    class MinecraftServerStatusHandler(BaseHTTPRequestHandler):
        def do_GET(self):
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            status = None
            try:
                status = mc_status.get_status()
                print(f'Current status: {status}')
                status = status.to_json()
            except Exception as ex:
                traceback.print_exc(file=sys.stderr)
                status = json.dumps({'error': ex}, indent=2)
            self.wfile.write(bytes(status, 'utf-8'))
    return MinecraftServerStatusHandler


def main():
    example_usage = """
example:
  minecraft-server-status my-server.dyndns.com
  minecraft-server-status my-server.dyndns.com --service 80
  minecraft-server-status my-server.dyndns.com --external-access --debug"""
    def_address = os.environ.get('MINECRAFT_SERVER') or f'localhost:{DEF_MINECRAFT_PORT}'
    parser = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter,
                                     description='Show status of the specific Minecraft server',
                                     epilog=example_usage)
    parser.add_argument('address', nargs='?', default=def_address,
                        help='Minecraft server address (format=host:port)')
    parser.add_argument('--web-service',
                        help='start a web service to provide a status in realtime on a specific port')
    parser.add_argument('--external-access', action='store_true', default=False,
                        help='check external access to your own Minecraft server')
    parser.add_argument('--debug', action='store_true', default=False,
                        help='enable verbose output')

    args = parser.parse_args()
    if args.debug is True:
        os.environ['DEBUG'] = 'true'

    external_access = args.external_access or os.environ.get('EXTERNAL_ACCESS') == 'true'
    mc_status = MinecraftServerStatus(args.address or def_address, external_access)

    if args.web_service:
        service_host = '0.0.0.0'
        service_port = int((args.web_service or '').lower().replace('true', '') or 80)
        handler = MinecraftServerStatusFactory(mc_status)
        web_server = HTTPServer((service_host, service_port), handler)
        web_server.mc_status = mc_status
        print(f'Watching to the Minecraft server on the {mc_status.address}.')
        print(f'Web service started http://{service_host}:{service_port}.')
        try:
            web_server.serve_forever()
        except KeyboardInterrupt:
            pass
        web_server.server_close()
        print('Server stopped.')
    else:
        print(mc_status.get_status())


if __name__ == '__main__':
    main()
