#!/bin/bash
#=============================================================================
## Helper script to start/stop/manage Nextcloud server
## The script is using '{IMAGE}' docker image.
##
## Usage: {SCRIPT_NAME} <command>
## Commands:
##   create/remove  - create or remove '{NAME}' container
##   start/stop     - start/stop '{NAME}' container
##   status         - show current status of the '{NAME}' container
##   config         - show current/default config for the script
##   logs           - show logs from the '{NAME}' container
##   shell          - open shell inside the container
##
## System environment variables:
##   $ {SCRIPT_NAME} config
##
## Config files:
##   /etc/{NAME}.conf
##   ~/.config/{NAME}.conf
#
#  Author     : Evgen Rusakov
#  Version    : 1.0.6
#  Url        : https://github.com/revgen
#  License    : MIT
#=============================================================================
# export NAME=${CONTAINER_NAME:-"nextcloud"}
export NAME="$(basename "$(pwd)")"
export IMAGE=rev9en/nextcloud
export CONFIG_NAME=${NAME}.conf
export PUID=${PUID:-"${UID}"}
export PGID=${PGID:-"$(id -g)"}
export TZ=$(cat /etc/timezone 2>/dev/null)

#-----------------------------------------------------------------------------
load_config() {
    export NEXTCLOUD_ADMIN_USERNAME=${NEXTCLOUD_ADMIN_USERNAME:-"admin"}
    export NEXTCLOUD_ADMIN_PASSWORD=${NEXTCLOUD_ADMIN_PASSWORD:-"Admin1234"}
    export NEXTCLOUD_PORT=${NEXTCLOUD_PORT:-"9180"}
    export NEXTCLOUD_ROOT=${NEXTCLOUD_ROOT:-"$(pwd)/nextcloud_root"}
    export NEXTCLOUD_DATA=${NEXTCLOUD_DATA:-"$(pwd)/nextcloud_data"}
    export NEXTCLOUD_CONFIG=${NEXTCLOUD_CONFIG:-"$(pwd)/nextcloud_config"}
    export NEXTCLOUD_APPS=${NEXTCLOUD_APPS:-"$(pwd)/nextcloud_apps"}
    export NEXTCLOUD_DB_DATA=${NEXTCLOUD_DB_DATA:-"$(pwd)/nextcloud_db"}
    export NEXTCLOUD_DB_NAME=${NEXTCLOUD_DB_NAME:-"nextcloud"}
    export NEXTCLOUD_DB_PASS=${NEXTCLOUD_DB_PASS:-"nextcloud"}
}
#-----------------------------------------------------------------------------
show_config() {
    echo "# -- Default configuration for the ${NAME} docker container --"
    echo "NEXTCLOUD_ADMIN_USERNAME=${NEXTCLOUD_ADMIN_USERNAME}"
    echo "NEXTCLOUD_ADMIN_PASSWORD=${NEXTCLOUD_ADMIN_PASSWORD}"
    echo "NEXTCLOUD_PORT=${NEXTCLOUD_PORT}"
    echo "NEXTCLOUD_ROOT=${NEXTCLOUD_ROOT}"
    echo "NEXTCLOUD_DATA=${NEXTCLOUD_DATA}"
    echo "NEXTCLOUD_CONFIG=${NEXTCLOUD_CONFIG}"
    echo "NEXTCLOUD_APPS=${NEXTCLOUD_APPS}"
    echo "NEXTCLOUD_DB_DATA=${NEXTCLOUD_DB_DATA}"
    echo "NEXTCLOUD_DB_NAME=${NEXTCLOUD_DB_NAME}"
    echo "NEXTCLOUD_DB_PASS=${NEXTCLOUD_DB_PASS}"
}
#-----------------------------------------------------------------------------
show_docker_compose_file() {
    echo 'version: 3

services:
  db:
    image: postgres:10.12-alpine
    restart: always
    
    volumes:
      - ${NEXTCLOUD_DB_DATA}:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${NEXTCLOUD_DB_NAME}
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${NEXTCLOUD_DB_PASS}
    
  app:
    image: ${IMAGE}
    restart: always
    ports:
      - ${NEXTCLOUD_PORT}:80
    volumes:
      - ${NEXTCLOUD_ROOT}:/var/www/html
      - ${NEXTCLOUD_DATA}:/var/www/html/data
      - ${NEXTCLOUD_CONFIG}:/var/www/html/config
      - ${NEXTCLOUD_APPS}:/var/www/html/apps
    environment:
      - TZ="${TZ}"
      - PGID=${PGID}
      - PUID=${PUID}
      - NEXT_CLOUD_ADMIN_USER="${NEXTCLOUD_ADMIN_USERNAME}"
      - NEXT_CLOUD_ADMIN_PASSWORD="${NEXTCLOUD_ADMIN_PASSWORD}"
      - POSTGRES_HOST=${NEXTCLOUD_DB_HOST}
      - POSTGRES_DB=${NEXTCLOUD_DB_NAME}
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${NEXTCLOUD_DB_PASS}
    depends_on:
      - db
'
}
#-----------------------------------------------------------------------------
create_container() {
    mkdir -p "${NEXTCLOUD_ROOT}" "${NEXTCLOUD_DATA}" "${NEXTCLOUD_CONFIG}" "${NEXTCLOUD_APPS}"
    
    export NEXTCLOUD_DB_HOST="${NAME}-db-1"

    echo "Create ${NAME} container."
    echo "-   Root: ${NEXTCLOUD_ROOT}"
    echo "-   Data: ${NEXTCLOUD_DATA}"
    echo "- Config: ${NEXTCLOUD_CONFIG}"
    echo "-   Apps: ${NEXTCLOUD_APPS}"
    echo "-  Admin: ${NEXTCLOUD_ADMIN_USERNAME}"
    echo "-DB path: ${NEXTCLOUD_DB_DATA}"
    echo "-DB host: ${NEXTCLOUD_DB_HOST}"
    echo "-DB name: ${NEXTCLOUD_DB_NAME}"
    echo "-DB pass: $(echo "${NEXTCLOUD_DB_PASS}" | sed 's/./*/g')"

    show_docker_compose_file | envsubst > docker-compose.yml
    [ -f docker-compose.yml ] && echo "Success"
}

#-----------------------------------------------------------------------------
show_status() {
    docker-compose ps --all
}

load_config_file() {
    # echo "Check config file ${1}..."
    if [ ! -f "${1}" ]; then
        # echo "Config file ${1} not found. Skip."
        return 1
    fi
    echo "Load config ${1}"
    set -a; . ${1}; set +a
}

#-----------------------------------------------------------------------------
cmd=${1:-"--help"}
shift

load_config_file "/etc/${CONFIG_NAME}" || load_config_file "${HOME}/.config/${CONFIG_NAME}"
load_config

case "${cmd}" in
    create|C)       create_container $@ ;;
    config|default-config) show_config $@ ;;
    delete|remove)
        docker stop "${NAME}" 2>/dev/null
        echo "Removing '${NAME}' container..."
        docker-compose down 2>/dev/null; echo "Done"
        ;;
    start|s)
        echo "Starting '${NAME}' containers..."
        docker-compose up -d && echo "Started '${NAME} - successfully"
        if [ "${1}" == "--logs" ]; then
            echo "Show logs (Ctrl+C to exit)..."
            docker-compose logs -f
        fi
        ;;
    stop|S)
        echo "Stopping '${NAME}' containers ..."
        docker-compose stop && echo "Stopped '${NAME}' - successfully"
        ;;
    # shell|sh)
    #     if [ "${1}" == "occ" ]; then
    #         shift
    #         docker exec --user www-data -it ${NAME} "/var/www/html/occ" "${@}"
    #     else
    #         docker exec -it "${NAME}" ${1:-"/bin/sh"}
    #     fi
    #     ;;
    log|logs|l) docker-compose logs $@ ;;
    status|info|I) show_status $@ ;;
    help|--help|-h)
        sed -n '/^##/,/^$/s/^## \{0,1\}//p' "$0" \
        | sed 's/{IMAGE}/'"$(echo ${IMAGE} | sed 's/\//\\\//g')"'/g' \
        | sed 's/{NAME}/'"${NAME}"'/g' \
        | sed 's/{SCRIPT_NAME}/'"$(basename "${0}")"'/g'
        exit 1 ;;
    *) echo "Error: Unknow command '${cmd}'."; exit 1 ;;
esac
#-----------------------------------------------------------------------------
