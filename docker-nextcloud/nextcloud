#!/bin/bash
#=============================================================================
## Helper script to start/stop/manage Nextcloud server
## The script is using '{IMAGE}' docker image.
##
## Usage: {SCRIPT_NAME} <command>
## Commands:
##   create/remove  - create or remove '{NAME}' container
##   start/stop     - start/stop '{NAME}' container
##   status         - show current status of the '{NAME}' container
##   config         - show current/default config for the script
##   logs           - show logs from the '{NAME}' container
##   shell          - open shell inside the container
##
## System environment variables:
##   $ {SCRIPT_NAME} config
##
## Config files:
##   /etc/{NAME}.conf
##   ~/.config/{NAME}.conf
#
#  Author     : Evgen Rusakov
#  Version    : 1.0.0
#  Url        : https://github.com/revgen
#  License    : MIT
#=============================================================================
NAME=${CONTAINER_NAME:-"nextcloud"}
IMAGE=rev9en/nextcloud
CONFIG_NAME=${NAME}.conf
PUID=${PUID:-"${UID}"}
PGID=${PGID:-"$(id -g)"}
TZ=$(cat /etc/timezone 2>/dev/null)

#--[ The script specific methods ]---------------------------------------------
load_config() {
    NEXTCLOUD_ADMIN_USERNAME=${NEXTCLOUD_ADMIN_USERNAME:-"admin"}
    NEXTCLOUD_ADMIN_PASSWORD=${NEXTCLOUD_ADMIN_PASSWORD:-"Admin1234"}
    NEXTCLOUD_PORT=${NEXTCLOUD_PORT:-"9180"}
    NEXTCLOUD_ROOT=${NEXTCLOUD_ROOT:-"$(pwd)/nextcloud_root"}
    NEXTCLOUD_DATA=${NEXTCLOUD_DATA:-"$(pwd)/nextcloud_data"}
    NEXTCLOUD_CONFIG=${NEXTCLOUD_CONFIG:-"$(pwd)/nextcloud_config"}
    NEXTCLOUD_APPS=${NEXTCLOUD_APPS:-"$(pwd)/nextcloud_apps"}
}

show_config() {
    echo "# -- Default configuration for the ${NAME} docker container --"
    echo "NEXTCLOUD_ADMIN_USERNAME=${NEXTCLOUD_ADMIN_USERNAME}"
    echo "NEXTCLOUD_ADMIN_PASSWORD=${NEXTCLOUD_ADMIN_PASSWORD}"
    echo "NEXTCLOUD_PORT=${NEXTCLOUD_PORT}"
    echo "NEXTCLOUD_ROOT=${NEXTCLOUD_ROOT}"
    echo "NEXTCLOUD_DATA=${NEXTCLOUD_DATA}"
    echo "NEXTCLOUD_CONFIG=${NEXTCLOUD_CONFIG}"
    echo "NEXTCLOUD_APPS=${NEXTCLOUD_APPS}"
}

create_container() {
    mkdir -p "${NEXTCLOUD_ROOT}" "${NEXTCLOUD_DATA}" "${NEXTCLOUD_CONFIG}" "${NEXTCLOUD_APPS}"
    #chown -R ${PUID}:${PGID} "${NEXTCLOUD_ROOT}" "${NEXTCLOUD_DATA}" "${NEXTCLOUD_CONFIG}" "${NEXTCLOUD_APPS}"

    echo "Create ${NAME} container."
    echo "-   Root: ${NEXTCLOUD_ROOT}"
    echo "-   Data: ${NEXTCLOUD_DATA}"
    echo "- Config: ${NEXTCLOUD_CONFIG}"
    echo "-   Apps: ${NEXTCLOUD_APPS}"
    echo "-  Admin: ${NEXTCLOUD_ADMIN_USERNAME}"
    docker create --name ${NAME} --restart=always \
        -p "${NEXTCLOUD_PORT}":80 \
        -e TZ="${TZ}" \
        -e PGID=${PGID} -e PUID=${PUID} \
        -e NEXT_CLOUD_ADMIN_USER="${NEXTCLOUD_ADMIN_USERNAME}" \
        -e NEXT_CLOUD_ADMIN_PASSWORD="${NEXTCLOUD_ADMIN_PASSWORD}" \
        -v ${NEXTCLOUD_ROOT}:/var/www/html \
        -v ${NEXTCLOUD_DATA}:/var/www/html/data \
        -v ${NEXTCLOUD_CONFIG}:/var/www/html/config \
        -v ${NEXTCLOUD_APPS}:/var/www/html/apps \
        ${IMAGE} \
    && echo "Success"
}

#--[ Base methods ]------------------------------------------------------------
show_status() {
    if docker images "${IMAGE}" --format "{{.Repository}}:{{.Tag}}" | grep -sqv "^$"; then  echo "    Image: ${IMAGE}";
    else echo "Error: image '${NAME}' not found"; return 1; fi
    id=$(docker inspect --format="({{.Id}})" ${NAME} 2>/dev/null)
    if [ -n "${id}" ]; then echo "Container: ${NAME} (${id})";
    else echo "Error: container ${NAME} not found"; return 1; fi
    docker inspect --format="   Status: {{.State.Status}} (restart={{.HostConfig.RestartPolicy.Name}})" ${NAME} || return 1
    printf "%s" "    Ports: "
    docker port ${NAME} 2>/dev/null | sed 's/0\.0\.0\.0://g' | sed 's/ //g' | xargs | grep -v '^$' \
    || docker inspect --format="{{.HostConfig.NetworkMode}}-mode" ${NAME}
    docker inspect --format="   Mounts: {{range .Mounts }}{{.Source}}->{{.Destination}} {{end}}" ${NAME} || return 1
}

load_config_file() {
    if [ ! -f "${1}" ]; then return 1; fi
    echo "Load config ${1}"
    set -a; . ${1}; set +a
}

#-----------------------------------------------------------------------------
cmd=${1:-"--help"}
shift

load_config_file "/etc/${CONFIG_NAME}" || load_config_file "${HOME}/.config/${CONFIG_NAME}"
load_config

case "${cmd}" in
    create|C)       create_container $@ ;;
    config|default-config) show_config $@ ;;
    delete|remove)
        docker stop "${NAME}" 2>/dev/null
        echo "Removing '${NAME}' container..."
        docker rm "${NAME}" 2>/dev/null; echo "Done"
        ;;
    start|s)
        echo "Starting '${NAME}' container..."
        docker start "${NAME}" && echo "Started '${NAME} - successfully"
        ;;
    stop|S)
        echo "Stopping '${NAME}' container ..."
        docker stop "${NAME}" && echo "Stopped '${NAME}' - successfully"
        ;;
    shell|sh)
        if [ "${1}" == "occ" ]; then
            shift
            docker exec --user www-data -it ${NAME} "/var/www/html/occ" "${@}"
        else
            docker exec -it "${NAME}" ${1:-"/bin/sh"}
        fi
        ;;
    log|logs|l) docker logs "${NAME}" $@ ;;
    status|info|I) show_status $@ ;;
    help|--help|-h)
        sed -n '/^##/,/^$/s/^## \{0,1\}//p' "$0" \
        | sed 's/{IMAGE}/'"$(echo ${IMAGE} | sed 's/\//\\\//g')"'/g' \
        | sed 's/{NAME}/'"${NAME}"'/g' \
        | sed 's/{SCRIPT_NAME}/'"$(basename "${0}")"'/g'
        exit 1 ;;
    *) echo "Error: Unknow command '${cmd}'."; exit 1 ;;
esac

