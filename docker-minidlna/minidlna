#!/bin/bash
#=============================================================================
## Helper script to control minidlna docker container.
## Usage: {SCRIPT_NAME} <start|stop|create|remove|logs|info|shell>
#
#  Author  : Evgen Rusakov
#  Version : 1.0.2
#  Url     : https://github.com/revgen/docker-minidlna
#
## Environment variables:
##   DLNA_VIDEO_STORAGE         - directory with video library (default: /mnt/storage/media/Video)
##   DLNA_MUSIC_STORAGE         - directory with music library (default: /mnt/storage/media/Music)
##   DLNA_IMAGE_STORAGE         - directory with images (default: /mnt/storage/photos)
##   DLNA_DOWNLOADS_STORAGE     - directory with video/music/images (default: /mnt/storage/downloads)
##   DLNA_SERVER_NAME           - Name of the server visible in the network (default: MediaServer)
##
#=============================================================================
# Show help screen based on the commented text at the top of the currect script
show_help() {
    sed -n '/^##/,/^$/s/^## \{0,1\}//p' "$0" | sed 's/{SCRIPT_NAME}/:wq'"$(basename "${0}")"'/g'
    exit 255
}

#-----------------------------------------------------------------------------
# PARAMETERS
IMAGE=${IMAGE:-"rev9en/minidlna"}
VERSION=${VERSION:-"latest"}
NAME=${NAME:-"$(basename "${IMAGE}")"}

DLNA_VIDEO_STORAGE="${DLNA_VIDEO_STORAGE:-"/mnt/storage/media/Video"}"
DLNA_MUSIC_STORAGE="${DDLNA_MUSIC_STORAGE:-"/mnt/storage/media/Music"}"
DLNA_IMAGES_STORAGE="${DLNA_IMAGES_STORAGE:-"/mnt/storage/photos"}"
DLNA_DOWNLOADS_STORAGE="${DLNA_DOWNLOADS_STORAGE:-"/mnt/storage/downloads"}"
DLNA_SERVER_NAME="${DLNA_SERVER_NAME:-"MediaServer"}"

# Using your current user default group ID inside the docker container
PGID=${DLNA_GID:-"$(id -G | cut -d" " -f1)"}
# Using your current user ID inside the docker container
PUID=${DLNA_UID:-${UID}}
# Http port to the Transmission web UI
PORT=${DLNA_PORT:-"8200"}

#-----------------------------------------------------------------------------
create_container() {
    # get current timezone: linux and os x version or UTC
    TZ=$(ls -l /etc/localtime 2>/dev/null | awk -F"zoneinfo/" '{print $2}' 2>/dev/null || echo "UTC")
    # The "--net=host" argument is very important, because it makes minidlna visible to all network
    docker create --name="${NAME}" --restart=always \
        --net=host \
        -p 1883:1883 -p 1900:1900/udp -p "${DLNA_PORT}":8200 -p 8280:80 \
        -v "${DLNA_VIDEO_STORAGE}":/media/Video \
        -v "${DLNA_IMAGES_STORAGE}":/media/Pictures \
        -v "${DLNA_MUSIC_STORAGE}":/media/Music \
        -v "${DLNA_DOWNLOADS_STORAGE}":/media/Downloads \
        -e PGID=${PGID} -e PUID=${PUID} \
        -e TZ="${TZ}" \
        -e DLNA_SERVER_NAME="${DLNA_SERVER_NAME}" \
        "${IMAGE}:${VERSION}"
    echo "Container '${NAME}' created successfully (from image: ${IMAGE}:${VERSION})."
}

#-----------------------------------------------------------------------------
start_container() {
    echo "Starting '${NAME}' container..."
    docker start "${NAME}" && echo "Started '${NAME} - successfully"
}

#-----------------------------------------------------------------------------
stop_container() {
    echo "Stopping '${NAME}' container ..."
    docker stop "${NAME}" && echo "Stopped '${NAME}' - successfully"
}

#-----------------------------------------------------------------------------
remove_container() {
    stop_container
    echo "Removing '${NAME}' container..."
    docker rm "${NAME}" 2>/dev/null
    echo "Done"
}

#-----------------------------------------------------------------------------
# Show main information about a contaier
status_container() {
    img=$(docker images "${IMAGE}" --format "{{.Repository}}:{{.Tag}}")
    if [ -n "${img}" ]; then echo "    Image: ${img}";
    else echo "    Image: Error - Image '${NAME}' not found"; fi
    id=$(docker ps --filter name=${NAME} --format "{{.ID}}")
    echo "Container: ${NAME}"
    if [ -n "${id}" ]; then
        ports=$(docker ps --filter name="${NAME}" --format "{{.Ports}}")
        status=$(docker ps --filter name="${NAME}" --format "{{.Status}}")
        mounts=$(docker inspect --format="{{range .Mounts }}{{.Source}} -> {{.Destination}},{{end}}" "${NAME}" | tr -s ',' '; ')
        started=$(docker inspect --format='{{.State.StartedAt}}' "${NAME}")
        echo "*  Status: ${status}"
        echo "* Started: ${started}"
        echo "*      ID: ${id}"
        echo "*   Ports: ${ports}"
        echo "*  Mounts: ${mounts}"
        return 0
    else
        echo "*  Status: stopped or not exists"   
        return 1
    fi    
}

#-----------------------------------------------------------------------------
# Parse command line and handle a command
case "${1:-"help"}" in
    create|C)       	shift; create_container $@ ;;
    delete|remove)  	shift; remove_container $@ ;;
    start|s)        	shift; start_container $@ ;;
    stop|S)         	shift; stop_container $@ ;;
    shell|sh)       	shift; docker exec -it "${NAME}" ${1:-"/bin/sh"} ;;
    log|logs|l)     	shift; docker logs "${NAME}" $@ ;;
    status|st)      	shift; status_container $@ ;;
    info|I)         	shift; status_container $@ ;;
    help|--help|h|-h)	show_help ;;
    *) echo "Error: Unknow command '${1}'."; show_help ;;
esac
